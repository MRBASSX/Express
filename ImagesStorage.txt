1 . Creating Model for Image

// models/Image.js

const mongoose = require('mongoose');

const ImageSchema = new mongoose.Schema({
  name: String,
  data: Buffer,
  contentType: String
});

module.exports = mongoose.model('Image', ImageSchema);


2.Creating Route For Image 


const mongoose = require('mongoose');
const multer = require('multer');
const Image = require('./models/Image');


// Configure multer storage in memory (we want buffer)
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// POST /upload route
app.post('/upload', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).send('No file uploaded.');
    }

    const newImage = new Image({
      name: req.file.originalname,
      data: req.file.buffer,
      contentType: req.file.mimetype,
    });

    await newImage.save();

    res.status(201).send('Image uploaded successfully!');
  } catch (error) {
    console.error(error);
    res.status(500).send('Server error');
  }
});




3 . Retrive Image File

app.get('/image/:id', async (req, res) => {
  try {
    const image = await Image.findById(req.params.id);
    if (!image) return res.status(404).send('Image not found');
    
    res.contentType(image.contentType);
    res.send(image.data);
  } catch (error) {
    res.status(500).send('Server error');
  }
});
















Saving large images


1. npm install express mongoose multer multer-gridfs-storage gridfs-stream


2. const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const { GridFsStorage } = require('multer-gridfs-storage');
const Grid = require('gridfs-stream');
const crypto = require('crypto');
const path = require('path');

const app = express();
const port = 3000;

// Mongo URI
const mongoURI = 'mongodb://localhost:27017/gridfsUploadDB';

// Create mongo connection
const conn = mongoose.createConnection(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Init gfs
let gfs;

conn.once('open', () => {
  // Init stream
  gfs = Grid(conn.db, mongoose.mongo);
  gfs.collection('uploads'); // Set collection name to look for files
});

// Create storage engine
const storage = new GridFsStorage({
  url: mongoURI,
  file: (req, file) => {
    return new Promise((resolve, reject) => {
      // Generate random file name with original extension
      crypto.randomBytes(16, (err, buf) => {
        if (err) {
          return reject(err);
        }
        const filename = buf.toString('hex') + path.extname(file.originalname);
        const fileInfo = {
          filename: filename,
          bucketName: 'uploads', // Should match gfs.collection name
        };
        resolve(fileInfo);
      });
    });
  },
});

const upload = multer({ storage });

// Upload endpoint
app.post('/upload', upload.single('file'), (req, res) => {
  res.json({ file: req.file });
});

// Get image by filename and stream it
app.get('/image/:filename', (req, res) => {
  gfs.files.findOne({ filename: req.params.filename }, (err, file) => {
    if (!file || file.length === 0) {
      return res.status(404).json({
        error: 'No file exists',
      });
    }

    // Check if image
    if (
      file.contentType === 'image/jpeg' ||
      file.contentType === 'image/png' ||
      file.contentType === 'image/gif'
    ) {
      // Read output to browser
      const readstream = gfs.createReadStream(file.filename);
      readstream.pipe(res);
    } else {
      res.status(404).json({
        error: 'Not an image',
      });
    }
  });
});




Upload Video 

const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const Video = require('./models/Video'); // path to your model

const app = express();
const upload = multer(); // memory storage by default

mongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true });

app.post('/upload', upload.single('video'), async (req, res) => {
  try {
    if (!req.file) return res.status(400).send('No file uploaded.');

    const newVideo = new Video({
      filename: req.file.originalname,
      contentType: req.file.mimetype,
      data: req.file.buffer,
    });

    await newVideo.save();

    res.send('Video uploaded successfully!');
  } catch (error) {
    console.error(error);
    res.status(500).send('Error uploading video');
  }
});

app.listen(3000, () => {
  console.log('Server running on port 3000');
});








