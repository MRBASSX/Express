Great! If you're using **MongoDB Compass**, it means you're running a local instance of MongoDB (or using it to manage a remote one). Let's walk through how to connect your **Express.js** app to a MongoDB database using **Mongoose** and interact with it.

---

## ✅ Step-by-Step: Add MongoDB Compass (Local MongoDB) to Express.js

---

### 1. **Install Mongoose**

Run this in your terminal:

```bash
npm install mongoose
```

---

### 2. **Find Your Connection String in MongoDB Compass**

In MongoDB Compass:

1. Go to the **"Connect"** screen.
2. Choose **"Connect using MongoDB Shell"** or **"Drivers"**.
3. Copy the connection string. It will look like this for a local instance:

```bash
mongodb://localhost:27017
```

You can append your database name to it:

```bash
mongodb://localhost:27017/mydatabase
```

---

### 3. **Connect to MongoDB in Your Express App**

Create or update your `server.js` or `app.js` file:

```js
const express = require('express');
const mongoose = require('mongoose');

const app = express();
app.use(express.json()); // for parsing JSON bodies

// Replace "mydatabase" with your actual database name
mongoose.connect('mongodb://localhost:27017/mydatabase', {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('✅ Connected to MongoDB');
}).catch((err) => {
  console.error('❌ MongoDB connection error:', err);
});

// Start server
app.listen(3000, () => {
  console.log('🚀 Server running on http://localhost:3000');
});
```

---

### 4. **Create a Mongoose Model**

Let’s create a simple `User` model:

**models/User.js**

```js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  age: Number
});

module.exports = mongoose.model('User', userSchema);
```

---

### 5. **Add Routes to Create and Fetch Users**

In your `app.js` or `routes/user.js`:

```js
const User = require('./models/User');

// Create user
app.post('/users', async (req, res) => {
  try {
    const user = new User(req.body);
    await user.save();
    res.status(201).send(user);
  } catch (err) {
    res.status(400).send(err);
  }
});

// Get all users
app.get('/users', async (req, res) => {
  const users = await User.find();
  res.send(users);
});
```

---

### ✅ Final Project Structure:

```
my-express-app/
│
├── models/
│   └── User.js
│
├── node_modules/
├── app.js
├── package.json
└── package-lock.json
```

---

### 6. **Test It**

Start the server:

```bash
node app.js
```

Use Postman or curl to:

* POST to `http://localhost:3000/users` with JSON:

  ```json
  {
    "name": "Alice",
    "email": "alice@example.com",
    "age": 30
  }
  ```

* GET from `http://localhost:3000/users`

---

Would you like me to help you set this up with a GitHub repo or add features like update/delete?
